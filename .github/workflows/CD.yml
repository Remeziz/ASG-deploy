name: CD
on:
  workflow_dispatch:
    inputs:
      runE2eTests:
        description: Run E2E tests
        type: boolean
        default: false
  push:
    branches: ["main"]

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform
        run: terraform apply -auto-approve

      - name: Get ASG Names
        id: get-asg-names
        run: |
          asg_names=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[*].AutoScalingGroupName' | jq -r '.[] | tr -d '\r')
          echo "asg_names=$asg_names" >> $GITHUB_ENV
        shell: bash
        
      - name: Process ASG Names
        run: |
          asg_names="${{ env.asg_names }}"
          IFS=$'\n' read -r -a asg_names_array <<< "$asg_names"
          echo "ASG Names: ${asg_names_array[@]}"
        
  update-asg:
    needs: terraform
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update ASG desired capacity
        run: |
          DESIRED_CAPACITY=1
          asg_names="${{ env.asg_names }}"
          IFS=$'\n' read -r -a asg_names_array <<< "$asg_names"
          for asg_name in "${asg_names_array[@]}"; do
            ASG_EXISTS=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "$asg_name" --query 'AutoScalingGroups[0].AutoScalingGroupName' --output text)
            if [ "$ASG_EXISTS" == "$asg_name" ]; then
              aws autoscaling update-auto-scaling-group --auto-scaling-group-name "$asg_name" --desired-capacity $DESIRED_CAPACITY
            else
              echo "ASG $asg_name not found"
            fi
          done
