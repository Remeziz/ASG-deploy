name: CD
on:
  workflow_dispatch:
    inputs:
      runE2eTests:
        description: Run E2E tests
        type: boolean
        default: false
  push:
    branches: ["main"]

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform
        run: terraform apply -auto-approve

      - name: Get Terraform Output
        id: get-output
        run: |
          asg_name_1=$(terraform output -raw asg_name_1 | tr -d '\r')
          asg_name_2=$(terraform output -raw asg_name_2 | tr -d '\r')
          echo "asg_name_1=$asg_name_1" >> $GITHUB_ENV
          echo "asg_name_2=$asg_name_2" >> $GITHUB_ENV

      - name: Process ASG Names
        run: |
          echo "ASG Name 1: ${{ env.asg_name_1 }}"
          echo "ASG Name 2: ${{ env.asg_name_2 }}"
        
  update-asg:
    needs: terraform
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update ASG1 desired capacity
        run: |
          DESIRED_CAPACITY=1
          ASG_EXISTS=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "${{ env.asg_name_1 }}" --query 'AutoScalingGroups[0].AutoScalingGroupName' --output text)
          if [ "$ASG_EXISTS" == "${{ env.asg_name_1 }}" ]; then
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name "${{ env.asg_name_1 }}" --desired-capacity $DESIRED_CAPACITY
          else
            echo "ASG ${{ env.asg_name_1 }} not found"
          fi

      - name: Update ASG2 desired capacity
        run: |
          DESIRED_CAPACITY=1
          ASG_EXISTS=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "${{ env.asg_name_2 }}" --query 'AutoScalingGroups[0].AutoScalingGroupName' --output text)
          if [ "$ASG_EXISTS" == "${{ env.asg_name_2 }}" ]; then
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name "${{ env.asg_name_2 }}" --desired-capacity $DESIRED_CAPACITY
          else
            echo "ASG ${{ env.asg_name_2 }} not found"
          fi
