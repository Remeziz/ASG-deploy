name: CD
on:
  workflow_dispatch:
    inputs:
      runE2eTests:
        description: Run E2E tests
        type: boolean
        default: false
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform
        id: apply
        run: terraform apply -auto-approve

      - name: Get ASG Names
        id: get-asg-names
        run: |
          asg_names=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[*].AutoScalingGroupName' --output json | jq -r '.[]' | tr -d '\r')
          asg_name_1=$(echo "$asg_names" | sed -n '1p')
          asg_name_2=$(echo "$asg_names" | sed -n '2p')
          echo "asg_name_1=$asg_name_1"
          echo "asg_name_2=$asg_name_2"
          if [ -z "$asg_name_1" ] || [ -z "$asg_name_2" ]; then
            echo "Error: One or both ASG names are empty"
            exit 1
          fi
          echo "asg_name_1=$asg_name_1" >> $GITHUB_ENV
          echo "asg_name_2=$asg_name_2" >> $GITHUB_ENV
        shell: bash
        
      - name: Process ASG Names
        run: |
          echo "ASG Name 1: ${{ env.asg_name_1 }}"
          echo "ASG Name 2: ${{ env.asg_name_2 }}"

      - name: Update ASG1 desired capacity
        run: |
          DESIRED_CAPACITY=1
          asg_name="${{ env.asg_name_1 }}"
          echo "Updating ASG: $asg_name"
          if [ -z "$asg_name" ]; then
            echo "Error: ASG name is empty"
            exit 1
          fi
          ASG_EXISTS=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "$asg_name" --query 'AutoScalingGroups[0].AutoScalingGroupName' --output text)
          if [ "$ASG_EXISTS" == "$asg_name" ]; then
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name "$asg_name" --desired-capacity $DESIRED_CAPACITY
          else
            echo "ASG $asg_name not found"
            exit 1
          fi

      - name: Wait for ASG1 to stabilize
        run: sleep 10

      - name: Check instance availability
        run: |
          asg_name="${{ env.asg_name_1 }}"
          for i in {1..5}; do
            INSTANCE_ID=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "$asg_name" --query 'AutoScalingGroups[0].Instances[0].InstanceId' --output text)
            if [ "$INSTANCE_ID" != "None" ]; then
              echo "Instance $INSTANCE_ID is available in ASG $asg_name"
              exit 0
            fi
            echo "Instance not found, retrying in 10 seconds..."
            sleep 10
          done
          echo "Error: No instance found in ASG $asg_name after multiple attempts"
          exit 1

      - name: Get Private Key from Secrets Manager
        id: ssh_key
        run: |
          aws secretsmanager get-secret-value --secret-id ssh-test --query SecretString --output text > ssh_key.pem
          chmod 400 ssh_key.pem

      - name: Get Instance ID and IP
        id: instance_info
        run: |
          INSTANCE_ID=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "${{ env.asg_name_1 }}" --query 'AutoScalingGroups[0].Instances[0].InstanceId' --output text)
          if [ "$INSTANCE_ID" == "None" ]; then
            echo "Error: No instance found in ASG $asg_name"
            exit 1
          fi
          INSTANCE_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
          if [ "$INSTANCE_IP" == "None" ]; then
            echo "Error: No public IP found for instance $INSTANCE_ID"
            exit 1
          fi
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

      - name: Check user_data execution
        run: |
          for i in {1..5}; do
            ssh -o StrictHostKeyChecking=no -i ssh_key.pem ec2-user@${{ env.INSTANCE_IP }} 'sudo grep "Cloud-init .* finished" /var/log/cloud-init-output.log'
            if [ $? -eq 0 ]; then
              echo "user_data executed successfully on instance ${{ env.INSTANCE_ID }}"
              exit 0
            fi
            echo "SSH connection failed, retrying in 10 seconds..."
            sleep 10
          done
          echo "Error: user_data did not execute successfully on instance ${{ env.INSTANCE_ID }} after multiple attempts"
          exit 1

      - name: Update ASG2 desired capacity
        run: |
          DESIRED_CAPACITY=1
          asg_name="${{ env.asg_name_2 }}"
          echo "Updating ASG: $asg_name"
          if [ -z "$asg_name" ]; then
            echo "Error: ASG name is empty"
            exit 1
          fi
          ASG_EXISTS=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "$asg_name" --query 'AutoScalingGroups[0].AutoScalingGroupName' --output text)
          if [ "$ASG_EXISTS" == "$asg_name" ]; then
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name "$asg_name" --desired-capacity $DESIRED_CAPACITY
          else
            echo "ASG $asg_name not found"
            exit 1
          fi
